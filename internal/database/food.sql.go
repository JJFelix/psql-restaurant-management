// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: food.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFood = `-- name: CreateFood :one
INSERT INTO food(id, name, price, food_image, created_at, updated_at, food_id, menu_id)
VALUES($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, name, price, food_image, created_at, updated_at, food_id, menu_id
`

type CreateFoodParams struct {
	ID        int32
	Name      string
	Price     string
	FoodImage string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	FoodID    uuid.UUID
	MenuID    uuid.UUID
}

func (q *Queries) CreateFood(ctx context.Context, arg CreateFoodParams) (Food, error) {
	row := q.db.QueryRowContext(ctx, createFood,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.FoodImage,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FoodID,
		arg.MenuID,
	)
	var i Food
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.FoodImage,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FoodID,
		&i.MenuID,
	)
	return i, err
}

const getFoodByFoodID = `-- name: GetFoodByFoodID :one
SELECT id, name, price, food_image, created_at, updated_at, food_id, menu_id FROM food WHERE food_id = $1
`

func (q *Queries) GetFoodByFoodID(ctx context.Context, foodID uuid.UUID) (Food, error) {
	row := q.db.QueryRowContext(ctx, getFoodByFoodID, foodID)
	var i Food
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.FoodImage,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FoodID,
		&i.MenuID,
	)
	return i, err
}
